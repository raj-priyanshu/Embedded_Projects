#include <WiFiClient.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <HardwareSerial.h>

void connectAWSIoT();
void mqttCallback(char *topic, byte *payload, unsigned int length);

char *ssid = "Shivam";
char *password = "225049145";

const char *endpoint = "xxxxxxxxxxxxxx.iot.ap-yyyyyyyyy-z.amazonaws.com";
const int port = 8883;
char *pubTopic = "$aws/things/esp32-hw/shadow/update";
char *subTopic = "$aws/things/esp32-hw/shadow/update/delta";

const char *rootCA = "-----BEGIN CERTIFICATE-----\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     ".............................\n"
                     "-----END CERTIFICATE-----\n";

const char *certificate = "-----BEGIN CERTIFICATE-----\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     ".............................\n"
                     "-----END CERTIFICATE-----\n";

const char *privateKey = "-----BEGIN CERTIFICATE-----\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     "................................................................\n"
                     ".............................\n"
                     "-----END CERTIFICATE-----\n";
const int ledPin = 2;
long lastMsg = 0;
char msg[50];

bool HPMAstatus = false;

HardwareSerial HPMA115S0(1);

#define RXD2 16
#define TXD2 17

WiFiClientSecure httpsClient;
PubSubClient mqttClient(httpsClient);

void setup()
{
    Serial.begin(9600, SERIAL_8N1);
    while (!Serial)
        ;
    pinMode(ledPin, OUTPUT);
    digitalWrite(ledPin, 0);
    setup_wifi();
    setup_client();
    HPMA115S0.begin(9600, SERIAL_8N1, RXD2, TXD2);
    while (!HPMA115S0)
        ;
    start_autosend();
    connectAWSIoT();
}

void setup_wifi()
{
    // Start WiFi
    Serial.println("Connecting to ");
    Serial.print(ssid);
//    WiFi.disconnect(true); //disconnect form wifi to set new wifi connection
//    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED)
    {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected.");
}

void setup_client()
{
    // Configure MQTT Client
    httpsClient.setCACert(rootCA);
    httpsClient.setCertificate(certificate);
    httpsClient.setPrivateKey(privateKey);
    mqttClient.setServer(endpoint, port);
    mqttClient.setCallback(mqttCallback);
}

void connectAWSIoT()
{
    while (!mqttClient.connected())
    {
        if (mqttClient.connect("ESP32_device"))
        {
            Serial.println("Connected.");
            int qos = 0;
            mqttClient.subscribe(subTopic, qos);
            Serial.println("Subscribed.");
        }
        else
        {
            Serial.print("Failed. Error state=");
            Serial.print(mqttClient.state());
            // Wait 5 seconds before retrying
            delay(5000);
        }
    }
}

long messageSentAt = 0;
char pubMessage[1024];
int PM25;
int PM10;

void mqttCallback(char *topic, byte *payload, unsigned int length)
{
    Serial.print("Received. topic=");
    Serial.println(topic);
    for (int i = 0; i < length; i++)
    {
        Serial.print((char)payload[i]);
    }
    Serial.print("\n");
}

void mqttLoop()
{
    if (!mqttClient.connected())
    {
        connectAWSIoT();
    }
    mqttClient.loop();

    long now = millis();
    if (now - messageSentAt > 5000)
    {
        messageSentAt = now;

        // Receive the particle data
        HPMAstatus = receive_measurement();
        if (!HPMAstatus)
        {
            digitalWrite(ledPin, 0);
            Serial.println("Cannot receive data from HPMA115S0!");
            return;
        }
        DynamicJsonDocument doc(1024);
//
//        doc["device"] = "ESP32";
//        doc["deviceId"] = "10000027";
//        JsonArray particleValues = doc.createNestedArray("particles");
//
//        JsonObject pm2_5Val = particleValues.createNestedObject();
//        pm2_5Val["type"] = "PM2.5";
//        pm2_5Val["value"] = PM25;
//
//        JsonObject pm10Val = particleValues.createNestedObject();
//        pm10Val["type"] = "PM10";
//        pm10Val["value"] = PM10;
        sprintf(pubMessage, "{ \"state\": { \"reported\": {\"device\": \"ESP32\", \"deviceId\": \"10000027\",\"particles\": [{\"type\": \"PM2.5\",\"value\": %d},{\"type\": \"PM10\",\"value\": %d}]}}}", PM25, PM10);

//        serializeJson(doc, pubMessage, sizeof(pubMessage));
        Serial.print("Publishing message to topic ");
        Serial.println(pubTopic);
        Serial.println(pubMessage);
        bool status = mqttClient.publish(pubTopic, pubMessage);
        if (status)
        {
            Serial.println("Published.");
            digitalWrite(ledPin, 1);
        }
        else
        {
            Serial.println("Couldn't be published!");
        }
    }
}

void loop()
{
    mqttLoop();
}

bool receive_measurement(void)
{
    while (HPMA115S0.available() < 32)
        ;
    byte HEAD0 = HPMA115S0.read();
    byte HEAD1 = HPMA115S0.read();
    while (HEAD0 != 0x42)
    {
        if (HEAD1 == 0x42)
        {
            HEAD0 = HEAD1;
            HEAD1 = HPMA115S0.read();
        }
        else
        {
            HEAD0 = HPMA115S0.read();
            HEAD1 = HPMA115S0.read();
        }
    }
    if (HEAD0 == 0x42 && HEAD1 == 0x4D)
    {
        byte LENH = HPMA115S0.read();
        byte LENL = HPMA115S0.read();
        byte Data0H = HPMA115S0.read();
        byte Data0L = HPMA115S0.read();
        byte Data1H = HPMA115S0.read();
        byte Data1L = HPMA115S0.read();
        byte Data2H = HPMA115S0.read();
        byte Data2L = HPMA115S0.read();
        byte Data3H = HPMA115S0.read();
        byte Data3L = HPMA115S0.read();
        byte Data4H = HPMA115S0.read();
        byte Data4L = HPMA115S0.read();
        byte Data5H = HPMA115S0.read();
        byte Data5L = HPMA115S0.read();
        byte Data6H = HPMA115S0.read();
        byte Data6L = HPMA115S0.read();
        byte Data7H = HPMA115S0.read();
        byte Data7L = HPMA115S0.read();
        byte Data8H = HPMA115S0.read();
        byte Data8L = HPMA115S0.read();
        byte Data9H = HPMA115S0.read();
        byte Data9L = HPMA115S0.read();
        byte Data10H = HPMA115S0.read();
        byte Data10L = HPMA115S0.read();
        byte Data11H = HPMA115S0.read();
        byte Data11L = HPMA115S0.read();
        byte Data12H = HPMA115S0.read();
        byte Data12L = HPMA115S0.read();
        byte CheckSumH = HPMA115S0.read();
        byte CheckSumL = HPMA115S0.read();
        if (((HEAD0 + HEAD1 + LENH + LENL + Data0H + Data0L + Data1H + Data1L + Data2H + Data2L + Data3H + Data3L + Data4H + Data4L + Data5H + Data5L + Data6H + Data6L + Data7H + Data7L + Data8H + Data8L + Data9H + Data9L + Data10H + Data10L + Data11H + Data11L + Data12H + Data12L) % 256) != CheckSumL)
        {
            Serial.println("Checksum fail");
            return 0;
        }
        PM25 = (Data1H * 256) + Data1L;
        PM10 = (Data2H * 256) + Data2L;
        return 1;
    }
}

bool start_autosend(void)
{
    // Start auto send
    byte start_autosend[] = {0x68, 0x01, 0x40, 0x57};
    HPMA115S0.write(start_autosend, sizeof(start_autosend));
    HPMA115S0.flush();
    delay(500);
    //Then we wait for the response
    while (HPMA115S0.available() < 2)
        ;
    byte read1 = HPMA115S0.read();
    byte read2 = HPMA115S0.read();
    // Test the response
    if ((read1 == 0xA5) && (read2 == 0xA5))
    {
        // ACK
        return 1;
    }
    else if ((read1 == 0x96) && (read2 == 0x96))
    {
        // NACK
        return 0;
    }
    else
        return 0;
}